WEBVTT

1
00:00:00.220 --> 00:00:04.570
In this video I'll show you how to include
a button to your graphical user interface,

2
00:00:04.570 --> 00:00:07.230
and how to associate an action with it.

3
00:00:07.230 --> 00:00:11.210
We'll be using the example provided
by the application "Block 1".

4
00:00:11.210 --> 00:00:14.240
This application presents two buttons.

5
00:00:14.240 --> 00:00:16.870
When you click on the pink button,

6
00:00:16.870 --> 00:00:20.220
a pop-up message is displayed
at the bottom of the screen.

7
00:00:20.220 --> 00:00:23.020
And when you click on the blue button,
it disappears.

8
00:00:25.410 --> 00:00:27.730
Let's start a new Android Studio project.

9
00:00:29.500 --> 00:00:34.110
Let's call the application Block01,
click next,

10
00:00:34.110 --> 00:00:38.910
I'll keep the Minimum SDK
to the API level 16

11
00:00:38.910 --> 00:00:44.020
because it will allow our application
to run on more than 

12
00:00:44.020 --> 00:00:44.610
90% of the phones out there.

13
00:00:44.610 --> 00:00:46.820
Click next.

14
00:00:48.500 --> 00:00:52.850
Choose the empty activity, it's one of
the simplest skeleton you can get for

15
00:00:52.850 --> 00:00:53.920
an activity.

16
00:00:53.920 --> 00:00:55.120
And then click next.

17
00:00:55.120 --> 00:00:55.710
The code for

18
00:00:55.710 --> 00:01:01.820
the only activity of our application will
be in the file MainActivity.java.

19
00:01:01.820 --> 00:01:05.970
And AndroidStudio can also
generate an XML file for

20
00:01:05.970 --> 00:01:09.550
us in order to define
the graphical user interface.

21
00:01:09.550 --> 00:01:12.980
This file will be activiy_main.xml.

22
00:01:12.980 --> 00:01:13.890
Click Finish.

23
00:01:13.890 --> 00:01:18.590
Android studio opens with two of
the files that it generated for us.

24
00:01:18.590 --> 00:01:22.345
And in fact, these will be the only
files we'll be editing today.

25
00:01:22.345 --> 00:01:24.423
The MainActivity.java file,

26
00:01:24.423 --> 00:01:26.578
we'll come back to this one later,

27
00:01:26.578 --> 00:01:28.710
and activity_main.xml.

28
00:01:28.710 --> 00:01:35.570
So this is where we will define
the graphical user interface.

29
00:01:35.570 --> 00:01:41.580
Let's make sure that here we
are using the API level 16.

30
00:01:41.580 --> 00:01:46.410
Okay, so now let's get rid of this
default "Hello world" TextView and

31
00:01:46.410 --> 00:01:50.960
instead drag a button here
to the upper left corner.

32
00:01:52.810 --> 00:01:57.520
Now I can change some of
the properties of this button.

33
00:01:57.520 --> 00:01:59.060
Like its width.

34
00:01:59.060 --> 00:02:03.350
I want it to match the parent in
order to have a large button.

35
00:02:04.940 --> 00:02:08.080
Next I need to change
the background color.

36
00:02:08.080 --> 00:02:16.030
So if I want a nice blue, I can use
AED2FF, it should do the trick.

37
00:02:16.030 --> 00:02:16.530
Yes.

38
00:02:18.200 --> 00:02:23.920
If I keep scrolling down,
I'll find the ID of the button.

39
00:02:23.920 --> 00:02:29.580
So remember this ID will allow you to refer
to this particular View later on.

40
00:02:29.580 --> 00:02:35.400
I like to call my views by using the type
of the view, so "button", followed by

41
00:02:35.400 --> 00:02:41.400
something related to the action or
the information associated with the view.

42
00:02:41.400 --> 00:02:47.280
So, this button is blue and sometimes,
during the execution of the application,

43
00:02:47.280 --> 00:02:51.887
and will disappear, so
let's call it "button_blueInvisible".

44
00:02:56.820 --> 00:03:02.415
Okay, and you notice that
here in the component tree,

45
00:03:02.415 --> 00:03:05.785
you can see that the ID of
the button was modified.

46
00:03:06.965 --> 00:03:13.765
I keep scrolling down, and here I find
the text which is displayed on the button.

47
00:03:13.765 --> 00:03:16.680
Let's change that as well

48
00:03:16.680 --> 00:03:20.425
so the button reads
"The Invisible Man's To Do List".

49
00:03:20.425 --> 00:03:26.044
[SOUND]

50
00:03:26.044 --> 00:03:32.788
Okay.

51
00:03:32.788 --> 00:03:37.302
Now we need a second button, almost
the same as this one, except it reads

52
00:03:37.302 --> 00:03:42.250
something else and it's pink, and
we want it right below the first one.

53
00:03:42.250 --> 00:03:47.350
So we can either do the same operations,
take a button here and drag it there, or

54
00:03:47.350 --> 00:03:53.950
I can display the XML file,
hitting the "Text" tab here.

55
00:03:55.160 --> 00:04:02.363
And I can just copy the existing button,
and paste this code underneath.

56
00:04:03.964 --> 00:04:04.948
So of course,

57
00:04:04.948 --> 00:04:10.160
Android Studio complains because now
I have two views with the same ID.

58
00:04:10.160 --> 00:04:16.203
So let's change the second one so
instead of button_blueInvisible

59
00:04:16.203 --> 00:04:20.460
it's button_pinkPanther.

60
00:04:20.460 --> 00:04:25.090
Okay let's change also the text
displayed on the button.

61
00:04:25.090 --> 00:04:31.760
It's not "The Invisible Man's To Do List",
it's "The Pink Panther's To Do List".

62
00:04:31.760 --> 00:04:37.590
We need to change the color as well, so

63
00:04:37.590 --> 00:04:41.253
I need a pink, #FG9BF3.

64
00:04:41.253 --> 00:04:46.020
And you can see here the resulting color.

65
00:04:46.020 --> 00:04:47.510
So it's fine.

66
00:04:47.510 --> 00:04:49.450
Let's go back to the design view.

67
00:04:50.790 --> 00:04:55.550
Oh, here I see that the second button
is placed on top of the first one.

68
00:04:55.550 --> 00:04:56.680
That's not what we want.

69
00:04:56.680 --> 00:05:01.752
So here, instead of aligning
the pink button with the parent,

70
00:05:01.752 --> 00:05:07.900
with the top of the parent, instead I
will put it below the first button.

71
00:05:08.910 --> 00:05:13.810
And see here how it's useful to have an ID
for the view, because I'm able to say,

72
00:05:13.810 --> 00:05:16.620
I want to be below
the button_blueInvisible.

73
00:05:18.520 --> 00:05:20.830
Let's go back to the design view.

74
00:05:20.830 --> 00:05:22.160
Okay, looks fine.

75
00:05:22.160 --> 00:05:24.889
Now let's try that on the emulator.

76
00:05:24.889 --> 00:05:30.963
So I hit the AVD manager and
start my emulator.

77
00:05:34.721 --> 00:05:39.784
Okay now that my emulator started
let's run the application on it and

78
00:05:39.784 --> 00:05:41.800
click the run button here.

79
00:05:44.010 --> 00:05:46.480
And wait for the app... oh yep,

80
00:05:46.480 --> 00:05:50.860
I need to specify I want
the application to run on the emulator.

81
00:05:50.860 --> 00:05:54.674
I don't want to be asked 
this question anymore okay, so

82
00:05:54.674 --> 00:05:59.292
now it takes a while before the application
is deployed on the emulator.

83
00:06:07.173 --> 00:06:10.270
Okay, it looks exactly like we wanted it to!

84
00:06:10.270 --> 00:06:13.170
But now of course nothing
happens when I click on

85
00:06:13.170 --> 00:06:16.870
the buttons because we didn't
attach any action with them yet.

86
00:06:16.870 --> 00:06:18.280
So now it's time to do that.

87
00:06:19.340 --> 00:06:21.560
Let's go back to the Java code.

88
00:06:23.700 --> 00:06:31.200
With the blue button selected, I'm
looking for the onClick property here.

89
00:06:31.200 --> 00:06:35.340
And here I specify the name of
the method that I want to be called

90
00:06:35.340 --> 00:06:36.490
when this button is clicked.

91
00:06:36.490 --> 00:06:37.870
Let's call it "toDo".

92
00:06:37.870 --> 00:06:43.210
And let's do the same for
the second button.

93
00:06:44.740 --> 00:06:48.520
Or instead let me show you how
to do that in the XML file.

94
00:06:48.520 --> 00:06:52.660
See that, the new line
which was generated is this one.

95
00:06:52.660 --> 00:06:58.600
So I can just copy that and
paste it for the pink button.

96
00:06:58.600 --> 00:07:02.960
So now, both buttons will call
the "toDo" method when clicked, and

97
00:07:02.960 --> 00:07:09.166
we're now going to define this method
in the MainActivity.java file.

98
00:07:09.166 --> 00:07:13.690
So this method should have
the following signature:

99
00:07:13.690 --> 00:07:20.580
It's a public method which returns nothing,
and it takes one parameter of type View.

100
00:07:25.690 --> 00:07:30.230
And this parameter, in fact,
indicates the view which was clicked,

101
00:07:30.230 --> 00:07:33.990
view which triggered the call
to the toDo method.

102
00:07:33.990 --> 00:07:39.590
So here we need to be able to distinguish
whether v is the blue button or

103
00:07:39.590 --> 00:07:44.420
the pink button because we won't perform
the same action for each button.

104
00:07:45.550 --> 00:07:48.780
So first I need to retrieve a reference to

105
00:07:48.780 --> 00:07:53.740
each button in order to compare V
to the two references.

106
00:07:53.740 --> 00:07:58.849
So let's create two buttons,

107
00:07:58.849 --> 00:08:04.743
button_blue, and button_pink,

108
00:08:04.743 --> 00:08:10.047
In the onCreate method I will use

109
00:08:10.047 --> 00:08:16.335
the findViewById method to associate

110
00:08:16.335 --> 00:08:21.443
the button_blue to the view that

111
00:08:21.443 --> 00:08:27.008
we've defined in the XML file.

112
00:08:27.008 --> 00:08:28.305
findViewById

113
00:08:28.305 --> 00:08:35.600
I use the ID that we defined in
the XML file: button_blueInvisible.

114
00:08:35.600 --> 00:08:39.960
The findViewById method
returns a View, a generic view, and

115
00:08:39.960 --> 00:08:42.380
instead we want something
more specific, a Button.

116
00:08:42.380 --> 00:08:47.390
So I just need to cast
the result to a Button and

117
00:08:47.390 --> 00:08:53.920
I do the same for the second button,
button_pink, so that will be a Button,

118
00:08:53.920 --> 00:09:01.600
and I get it by using its ID
which was button_pinkPanther.

119
00:09:03.130 --> 00:09:06.600
Ok,
now that I have my two references,

120
00:09:06.600 --> 00:09:11.230
I am able to compare v to
one of these references.

121
00:09:11.230 --> 00:09:19.470
So if v.equals(button_blue),

122
00:09:19.470 --> 00:09:22.490
then I'll do the invisibility stuff.

123
00:09:24.710 --> 00:09:27.266
And now if v

124
00:09:27.266 --> 00:09:33.600
equals the pink button.

125
00:09:33.600 --> 00:09:35.654
then I'll do the pop-up thing.

126
00:09:41.280 --> 00:09:45.340
Okay, now let me show you how
to turn a view invisible.

127
00:09:46.510 --> 00:09:50.460
In fact it's really easy.

128
00:09:50.460 --> 00:09:57.790
Each view proposes a method called
setVisibility,

129
00:09:57.790 --> 00:10:00.560
and of course there
are two possible values:

130
00:10:00.560 --> 00:10:03.640
It's either visible or invisible.

131
00:10:03.640 --> 00:10:06.540
So when the blue button is clicked,

132
00:10:06.540 --> 00:10:13.000
it'll call the toDo method, with
a reference to the blue button itself.

133
00:10:13.000 --> 00:10:16.100
So this test will succeed, and

134
00:10:16.100 --> 00:10:19.310
the visibility of the button
will be changed to invisible.

135
00:10:20.990 --> 00:10:22.990
Now what about the pop up?

136
00:10:22.990 --> 00:10:27.680
In Android, the pop-up are provided
by a class named "Toast".

137
00:10:28.890 --> 00:10:32.930
And this class defines a static
method called "makeText".

138
00:10:32.930 --> 00:10:40.125
So you need to provide
the context of this toast.

139
00:10:40.125 --> 00:10:44.810
Then the second parameter is the text that
you want to be displayed in the pop up.

140
00:10:44.810 --> 00:10:47.817
So in our case it's "to do...

141
00:10:47.817 --> 00:10:48.995
To do.

142
00:10:48.995 --> 00:10:49.850
To do."

143
00:10:52.043 --> 00:10:56.793
And the third and last
parameter indicates the duration you

144
00:10:56.793 --> 00:11:00.740
want the pop up to be
displayed on the screen.

145
00:11:00.740 --> 00:11:04.955
So you've got two predefined values,
it's either a short

146
00:11:04.955 --> 00:11:07.335
time for a short interval or a long one.

147
00:11:07.335 --> 00:11:08.535
Let me put a short one.

148
00:11:09.575 --> 00:11:13.595
Okay, now our toast is ready, but

149
00:11:13.595 --> 00:11:17.405
it won't display on the screen
until I call the "show" method.

150
00:11:19.395 --> 00:11:21.375
Okay, now our code is complete.

151
00:11:21.375 --> 00:11:23.197
Let's try it again on the emulator.

152
00:11:27.474 --> 00:11:31.726
Now if I click the pink button,
I've got my little pop up displaying

153
00:11:31.726 --> 00:11:35.920
at the bottom of the screen for
a short period of time.

154
00:11:35.920 --> 00:11:39.740
And if I click the blue button,
it disappears.

155
00:11:41.190 --> 00:11:44.940
Now let me show you a different
solution to add an action to a button.
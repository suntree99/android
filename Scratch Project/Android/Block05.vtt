WEBVTT

1
00:00:00.680 --> 00:00:04.070
In this video I'll show you how to
save information on your phone during

2
00:00:04.070 --> 00:00:10.140
an execution of your application, and how
to retrieve it during the next execution.

3
00:00:10.140 --> 00:00:13.800
I will be using the Block05
application as an example.

4
00:00:13.800 --> 00:00:17.920
So, upon starting, this application
presents a white background.

5
00:00:17.920 --> 00:00:19.190
And when you click, for instance,

6
00:00:19.190 --> 00:00:22.880
the magenta radio button,
the background turns magenta.

7
00:00:22.880 --> 00:00:25.660
And if you click blue, it turns blue.

8
00:00:25.660 --> 00:00:30.460
If you close the application and
execute it again,

9
00:00:31.480 --> 00:00:35.030
the background is set to the last
color that you've picked.

10
00:00:36.890 --> 00:00:38.810
Start a new Android Studio project.

11
00:00:39.950 --> 00:00:42.956
Call the application Block05.

12
00:00:42.956 --> 00:00:45.649
Click Next.

13
00:00:45.649 --> 00:00:48.180
Pick the API level 16.

14
00:00:48.180 --> 00:00:51.709
Next, choose an empty activity.

15
00:00:51.709 --> 00:00:53.009
Next.

16
00:00:53.009 --> 00:00:55.264
And Finish.

17
00:00:55.264 --> 00:00:57.938
I will start by building
the graphical user interface.

18
00:00:57.938 --> 00:01:01.700
Go to activity_main.xml.

19
00:01:01.700 --> 00:01:06.200
Then get rid of the default
"Hello World" TextView.

20
00:01:06.200 --> 00:01:09.720
And drag a RadioGroup here.

21
00:01:10.730 --> 00:01:17.995
So this RadioGroup will be
named radioGroup_colors.

22
00:01:20.630 --> 00:01:25.680
And next, we will add three
buttons to this radio group.

23
00:01:25.680 --> 00:01:30.056
The first button will read Blue, and

24
00:01:30.056 --> 00:01:34.584
that will be our radioButton_blue.

25
00:01:34.584 --> 00:01:42.216
The second button will let
the user choose the magenta color.

26
00:01:42.216 --> 00:01:42.876
Magenta.

27
00:01:48.982 --> 00:01:51.328
RadioButton.

28
00:01:51.328 --> 00:01:53.487
Magenta.

29
00:01:53.487 --> 00:01:58.155
And the last one is for the yellow.

30
00:01:58.155 --> 00:01:59.501
Yellow.

31
00:01:59.501 --> 00:02:04.052
Let's change its id to radioButton_yellow.

32
00:02:06.745 --> 00:02:11.096
And one more thing we need to do
is to give a name to this layout,

33
00:02:11.096 --> 00:02:16.900
because in this application we want to
change the background color of the layout.

34
00:02:16.900 --> 00:02:19.320
So we need a way to refer to it.

35
00:02:19.320 --> 00:02:22.398
So here,
let's take the relative layout and

36
00:02:22.398 --> 00:02:26.300
scroll down until you
find the property id.

37
00:02:26.300 --> 00:02:29.160
And let's call it layout.

38
00:02:30.590 --> 00:02:31.910
Okay.

39
00:02:31.910 --> 00:02:35.780
Now, I can go to
the MainActivity.java file and

40
00:02:35.780 --> 00:02:40.180
start adding some interactivity
to our user interface.

41
00:02:41.520 --> 00:02:46.820
So first,
let's retrieve a reference to the layout.

42
00:02:46.820 --> 00:02:51.335
RelativeLayout layout.

43
00:02:51.335 --> 00:02:53.541
So that's a relative layout.

44
00:02:53.541 --> 00:03:01.167
And I get a reference by
using findViewById method.

45
00:03:01.167 --> 00:03:03.741
R.id.layout.

46
00:03:03.741 --> 00:03:08.960
Then I need a reference
to my group of buttons.

47
00:03:08.960 --> 00:03:13.061
So I type RadioGroup

48
00:03:13.061 --> 00:03:17.900
radioGroup_colors.

49
00:03:17.900 --> 00:03:19.200
I use a findViewById.

50
00:03:21.940 --> 00:03:24.225
And I call this radioGroups_colors.

51
00:03:25.470 --> 00:03:28.853
Don't forget to cast that.

52
00:03:28.853 --> 00:03:36.470
Okay, and now that this is done,
I can add a listener to this radio group

53
00:03:36.470 --> 00:03:42.684
so that when one item is clicked,
I can react to this event.

54
00:03:42.684 --> 00:03:49.794
So it's
radioGroup_colors.setOnCheckedChangedListener

55
00:03:49.794 --> 00:03:51.490
Listener.

56
00:03:51.490 --> 00:03:56.128
Let's add a new OnCheckedChangeListener.

57
00:03:56.128 --> 00:04:02.401
Okay, so when one of the item
of the radio group is selected,

58
00:04:02.401 --> 00:04:07.370
I'll get the ID of the radio button here.

59
00:04:07.370 --> 00:04:11.569
So now I'll do something different
depending on the value of this

60
00:04:11.569 --> 00:04:12.570
integer here.

61
00:04:14.000 --> 00:04:19.732
So if the checked ID is
equal to my view named

62
00:04:19.732 --> 00:04:25.148
radioButton_blue, then I will change

63
00:04:25.148 --> 00:04:31.056
the background color
of the layout to blue.

64
00:04:31.056 --> 00:04:35.106
So layout.setBackgroundColor.

65
00:04:35.106 --> 00:04:40.772
And let's use a predefined color here,
like blue.

66
00:04:40.772 --> 00:04:46.548
Now, if the checkedId is equal to the ID

67
00:04:46.548 --> 00:04:53.023
of the second button, so, it was magenta,

68
00:04:53.023 --> 00:04:59.161
then I will change the layout to magenta.

69
00:05:02.389 --> 00:05:04.079
What?

70
00:05:04.079 --> 00:05:08.333
I forgot the if, else if

71
00:05:08.333 --> 00:05:17.063
layout.setBackgroundColor to
Color.MAGENTA.

72
00:05:17.063 --> 00:05:18.874
And last case.

73
00:05:18.874 --> 00:05:23.829
Else, if it's equal to the last button,

74
00:05:23.829 --> 00:05:29.069
named radioButton_yellow, then I change

75
00:05:29.069 --> 00:05:33.897
the layout background color to yellow.

76
00:05:41.867 --> 00:05:45.281
Okay, let's try that first.

77
00:05:45.281 --> 00:05:47.533
I'll run the application on the emulator.

78
00:05:52.617 --> 00:05:55.970
When I click blue,
the background turns blue.

79
00:05:55.970 --> 00:05:58.920
If I click magenta, it turns pink.

80
00:05:58.920 --> 00:06:02.240
And if I click yellow,
it's turning yellow.

81
00:06:02.240 --> 00:06:08.600
But now if I exit the application,
and if I come back to it

82
00:06:08.600 --> 00:06:14.070
after, the application does not remember
that the last picked color was yellow.

83
00:06:14.070 --> 00:06:17.540
And the background is back to white.

84
00:06:17.540 --> 00:06:22.150
Now, what we want to do is to remember
from one execution to the next

85
00:06:22.150 --> 00:06:24.580
what was the last color picked.

86
00:06:24.580 --> 00:06:27.650
Before we do that, before we add that
functionality, I want to show you

87
00:06:27.650 --> 00:06:32.510
something that's quite useful when
you are developing with Android.

88
00:06:32.510 --> 00:06:36.230
It's called the ADB,
the Android debug bridge.

89
00:06:36.230 --> 00:06:41.537
So, you move to the directory where
you've installed the Android SDK,

90
00:06:41.537 --> 00:06:46.062
and there you should find a
directory named platform-tools.

91
00:06:46.062 --> 00:06:47.640
So move into that directory.

92
00:06:51.401 --> 00:06:55.953
And there you will find the ADB.

93
00:06:55.953 --> 00:07:01.680
So you can start it using adb,
space, shell.

94
00:07:01.680 --> 00:07:07.440
So depending on your operating system,
the syntax might look slightly different.

95
00:07:07.440 --> 00:07:11.895
But once you start this command,
now, here,

96
00:07:11.895 --> 00:07:17.640
it's like we are on the device,
on the emulated device.

97
00:07:17.640 --> 00:07:21.670
So it's only Linux commands that
you'll be able to enter here.

98
00:07:21.670 --> 00:07:27.259
So for instance, to list the content
of that directory, I type in ls.

99
00:07:29.140 --> 00:07:34.550
And there is one particular directory and
subdirectory that we're interested in.

100
00:07:34.550 --> 00:07:36.010
It's data/data.

101
00:07:36.010 --> 00:07:37.700
So let's move into that one.

102
00:07:37.700 --> 00:07:42.310
Change directory, data/data.

103
00:07:42.310 --> 00:07:46.360
And in here I'll find
information associated with

104
00:07:46.360 --> 00:07:49.070
all the applications which
are installed on my phone.

105
00:07:49.070 --> 00:07:53.476
And you see here, Block05,
the one that we are working on.

106
00:07:53.476 --> 00:07:58.057
Let's move into it,

107
00:07:58.057 --> 00:08:01.115
cd fr, okay.

108
00:08:01.115 --> 00:08:06.422
And there,
if I list the content of the directory,

109
00:08:06.422 --> 00:08:11.790
for now we only have cache and
code_cache elements.

110
00:08:11.790 --> 00:08:14.470
We don't have anything
related to preferences.

111
00:08:14.470 --> 00:08:18.959
You'll see that in a while, after we
have implemented our new functionality,

112
00:08:18.959 --> 00:08:20.410
it will look different.

113
00:08:20.410 --> 00:08:22.840
We'll come back to these window later on.

114
00:08:23.880 --> 00:08:25.408
For now, let's move back to the code.

115
00:08:29.077 --> 00:08:34.350
Android offers different possibilities for
your application to store information.

116
00:08:34.350 --> 00:08:40.490
You can either create a database or
create a regular plain text file.

117
00:08:40.490 --> 00:08:42.807
But here we will use preferences.

118
00:08:42.807 --> 00:08:49.401
So preferences are stored as couples
of key-value in an XML file.

119
00:08:49.401 --> 00:08:57.470
The object to let you manipulate those
preferences is called SharedPreferences.

120
00:08:57.470 --> 00:09:00.068
So, SharedPreference preferences.

121
00:09:00.068 --> 00:09:05.640
I can get one using
the getSharedPreferences method.

122
00:09:05.640 --> 00:09:07.752
I need to provide the name of the file.

123
00:09:07.752 --> 00:09:11.520
So if there are no preferences
file with this name

124
00:09:12.560 --> 00:09:17.476
existing already, Android will
create one when we call the editor.

125
00:09:17.476 --> 00:09:21.330
Otherwise, it will point
to the existing file.

126
00:09:21.330 --> 00:09:24.630
And then I need to provide an access mode.

127
00:09:24.630 --> 00:09:29.254
Since I only want my application to
be able to access this information,

128
00:09:29.254 --> 00:09:31.420
I'll keep the mode to private.

129
00:09:32.470 --> 00:09:39.400
Then I need to retrieve an editor,
let's call it editor, on that file.

130
00:09:39.400 --> 00:09:42.170
I can do that by using the edit method.

131
00:09:43.240 --> 00:09:43.740
Okay.

132
00:09:44.850 --> 00:09:50.140
Now I'll be able to read information
from this preferences file and

133
00:09:50.140 --> 00:09:51.480
store information into it.

134
00:09:53.460 --> 00:09:57.480
Okay.
First let me change something here.

135
00:09:57.480 --> 00:10:03.200
I would like to replace this series
of if-else by a switch statement.

136
00:10:03.200 --> 00:10:06.140
So if you put your cursor here on the if,
and

137
00:10:06.140 --> 00:10:11.830
then the little light bulb,
you can let Android do that for you.

138
00:10:11.830 --> 00:10:13.529
Replace if with switch.

139
00:10:14.650 --> 00:10:15.320
Okay.

140
00:10:15.320 --> 00:10:17.820
And something else I like to do is,

141
00:10:20.820 --> 00:10:26.390
let's add a variable which will
hold the ID of the code for

142
00:10:26.390 --> 00:10:30.290
the color I would like to use for
the background.

143
00:10:30.290 --> 00:10:32.170
So let's create a colorCode.

144
00:10:33.620 --> 00:10:36.053
Let's initialize it to zero.

145
00:10:36.053 --> 00:10:43.169
And in here, instead of setting
the background directly,

146
00:10:43.169 --> 00:10:50.160
I'll just change that so
that colorCode = Color.BLUE.

147
00:10:51.260 --> 00:10:54.296
And same below.

148
00:10:54.296 --> 00:10:57.710
I'll do the same here.

149
00:10:57.710 --> 00:10:58.476
And there.

150
00:11:05.349 --> 00:11:12.640
And I'll set the layout background
color only at the end.

151
00:11:12.640 --> 00:11:16.308
setBackgroundColor to our colorCode.

152
00:11:16.308 --> 00:11:18.630
Okay.

153
00:11:18.630 --> 00:11:23.612
Now, what I want to do, also,
in addition to set the background color,

154
00:11:23.612 --> 00:11:27.820
is also to remember that
color in our preferences file.

155
00:11:27.820 --> 00:11:30.852
So it's time to add something
to our preferences file.

156
00:11:30.852 --> 00:11:36.100
With editor.put,
it's an integer that we want to put.

157
00:11:36.100 --> 00:11:37.440
And we need to provide a key.

158
00:11:37.440 --> 00:11:41.720
Let's call it colorId.

159
00:11:41.720 --> 00:11:42.840
And then the value.

160
00:11:42.840 --> 00:11:44.677
So in our case, that would be colorCode.

161
00:11:46.910 --> 00:11:47.410
Okay.

162
00:11:48.640 --> 00:11:52.730
The information is not stored on the disk

163
00:11:52.730 --> 00:11:56.600
until you call the commit
method on the editor.

164
00:11:56.600 --> 00:11:57.690
So don't forget that.

165
00:11:57.690 --> 00:12:02.080
It's a common mistake to
forget this commit statement.

166
00:12:03.520 --> 00:12:06.209
Okay.
So now if I run the application again,

167
00:12:12.850 --> 00:12:18.947
Now when I click blue,
if I go back to my ADB window and

168
00:12:18.947 --> 00:12:26.980
check the content of that directory again,
there is something new.

169
00:12:26.980 --> 00:12:31.520
Notice that there is a shared
preference which wasn't here before.

170
00:12:31.520 --> 00:12:32.750
So let's explore it.

171
00:12:35.750 --> 00:12:41.990
So in this directory now,
we have a file named COLOR_PREF.xml.

172
00:12:41.990 --> 00:12:48.523
And if I use a cat command,
I'm able to see the content of this file.

173
00:12:48.523 --> 00:12:54.785
And you see that I've got one element,
one element with the key colorId,

174
00:12:54.785 --> 00:13:00.657
and the value, which is this,
it's the code color for blue, okay?

175
00:13:00.657 --> 00:13:04.377
And if I change to magenta and

176
00:13:04.377 --> 00:13:08.562
I repeat the same command here,

177
00:13:08.562 --> 00:13:13.710
you see that the value changed, okay?

178
00:13:13.710 --> 00:13:18.070
But if I exit my application and

179
00:13:18.070 --> 00:13:23.570
if I run it again, the screen is white.

180
00:13:23.570 --> 00:13:26.540
It didn't remember that the last
picked color was magenta.

181
00:13:26.540 --> 00:13:30.190
Well, actually, it did remember it,
but we haven't used that information.

182
00:13:30.190 --> 00:13:33.356
So we need to add
something more to our code.

183
00:13:33.356 --> 00:13:38.410
Here at the beginning,
we need to read the preferences file to set

184
00:13:38.410 --> 00:13:42.440
the initial background color for
our layout.

185
00:13:42.440 --> 00:13:47.660
So, to read the background
color for the layout,

186
00:13:47.660 --> 00:13:52.750
I'll check if the preferences file contains

187
00:13:52.750 --> 00:13:58.654
an element with the key colorId.

188
00:13:58.654 --> 00:14:01.580
colorId.

189
00:14:01.580 --> 00:14:06.394
And if that's the case, then I'll retrieve

190
00:14:06.394 --> 00:14:11.081
this value by using preferences.getInt,

191
00:14:11.081 --> 00:14:15.386
because I remember it's an int I stored,

192
00:14:15.386 --> 00:14:19.480
the int stored with the key colorId.

193
00:14:19.480 --> 00:14:21.434
And then I need to
provide a default value.

194
00:14:21.434 --> 00:14:22.460
Let's put 0.

195
00:14:22.460 --> 00:14:25.910
So that's the color code
which was saved in our file.

196
00:14:25.910 --> 00:14:29.272
Now let's use that to set
the background color of the layout.

197
00:14:29.272 --> 00:14:32.778
layout.setBackgroundColor.

198
00:14:38.072 --> 00:14:41.530
Okay.
So now we are reading this information

199
00:14:41.530 --> 00:14:47.500
from the color preferences file, and
using it to set the background color.

200
00:14:47.500 --> 00:14:49.190
Let's try the application one more time.

201
00:14:53.996 --> 00:14:59.897
Okay, see, when it started,
it read the XML file, found the code for

202
00:14:59.897 --> 00:15:04.519
magenta, and so
it turned the background to magenta.

203
00:15:04.519 --> 00:15:08.090
If you want to make sure that's correct,
let's click yellow.

204
00:15:08.090 --> 00:15:11.490
And then let's close the application and
start it again.

205
00:15:13.050 --> 00:15:14.176
The background is yellow.

206
00:15:18.634 --> 00:15:19.480
In this video,

207
00:15:19.480 --> 00:15:23.910
you've learned how to save information
on your phone using preferences.

208
00:15:23.910 --> 00:15:29.510
So preferences is a set of key value
that you store in an XML file.

209
00:15:29.510 --> 00:15:33.350
To access this file, you need to
create a SharedPreference object

210
00:15:33.350 --> 00:15:36.970
by giving the name of the file and
the access mode.

211
00:15:36.970 --> 00:15:40.060
And then to edit it,
to store information or

212
00:15:40.060 --> 00:15:43.780
to retrieve information from it,
you need an editor.

213
00:15:43.780 --> 00:15:49.200
After that, you can use a putInt,
putDouble, putString, or other methods

214
00:15:49.200 --> 00:15:54.180
to store a new set of
data in the XML file.

215
00:15:54.180 --> 00:15:57.440
You provide a key and the value.

216
00:15:57.440 --> 00:16:00.330
But the set will be saved on the file

217
00:16:00.330 --> 00:16:04.260
only after you've called
the commit method on the editor.

218
00:16:04.260 --> 00:16:09.100
To retrieve an information from the file,
you use getInt, getDouble, getString.

219
00:16:09.100 --> 00:16:12.470
And then you retrieve the value
by providing its key.

220
00:16:14.498 --> 00:16:17.290
You've also learned how
to explore the content of

221
00:16:17.290 --> 00:16:19.700
the file system of your emulator.

222
00:16:19.700 --> 00:16:23.200
For that you can use the ADB shell.

223
00:16:23.200 --> 00:16:26.460
So ADB stands for
Android debugging bridge.

224
00:16:26.460 --> 00:16:33.640
And it's located in the platform-tools
folder from your Android SDK directory.
WEBVTT

1
00:00:00.540 --> 00:00:04.470
In this video, we'll be using
the application Block07 as an example.

2
00:00:04.470 --> 00:00:06.990
I'll show you how to use a number picker

3
00:00:06.990 --> 00:00:10.370
to let the users choose
between multiple texts.

4
00:00:10.370 --> 00:00:13.980
And then, how to display a web
page in your own application.

5
00:00:17.195 --> 00:00:19.110
Start a new Android Studio project.

6
00:00:21.190 --> 00:00:26.370
Call the application Block07,
and then click Next.

7
00:00:27.740 --> 00:00:31.300
API level 16, click Next.

8
00:00:31.300 --> 00:00:34.980
Choose an empty activity, click Next.

9
00:00:34.980 --> 00:00:36.029
And click Finish.

10
00:00:37.900 --> 00:00:43.410
Let's start by defining the graphical user
interface in the activity_main.xml file.

11
00:00:43.410 --> 00:00:46.960
I remove the default TextView "Hello World".

12
00:00:46.960 --> 00:00:51.200
Then, I scroll down to the Expert section.

13
00:00:51.200 --> 00:00:55.504
And here, I drag the number picker.

14
00:00:55.504 --> 00:01:00.921
Below the number picker,
I'll need a button.

15
00:01:00.921 --> 00:01:05.867
So this button will read OK and onClick,

16
00:01:05.867 --> 00:01:10.671
we want to call the navigate function.

17
00:01:10.671 --> 00:01:13.754
Here, navigate.

18
00:01:13.754 --> 00:01:14.797
Okay.

19
00:01:14.797 --> 00:01:20.950
And the last thing we need is a WebView,
to display the web page below the button.

20
00:01:23.420 --> 00:01:26.630
Now, we need to work on
the NumberPicker so it presents

21
00:01:26.630 --> 00:01:29.500
texts to the user rather than numbers.

22
00:01:29.500 --> 00:01:33.780
So let's move to the MainActivity.java file.

23
00:01:33.780 --> 00:01:38.421
First, I need to retrieve
a reference to this NumberPicker.

24
00:01:38.421 --> 00:01:47.130
So I'll create a NumberPicker
called possibilities.

25
00:01:50.650 --> 00:01:55.780
Okay, let's use the findViewById
to retrieve the reference.

26
00:01:56.850 --> 00:02:03.350
So that's a NumberPicker and
the id is numberPicker.

27
00:02:05.630 --> 00:02:06.310
Okay.

28
00:02:06.310 --> 00:02:11.290
Now, let's define an array
of strings with all

29
00:02:11.290 --> 00:02:15.710
the texts that we want to display
in each row of the NumberPicker.

30
00:02:17.490 --> 00:02:24.880
So let's call this array of strings,
possibilitiesStrings.

31
00:02:29.379 --> 00:02:32.586
So, numberPicker will be
displaying 4 strings.

32
00:02:32.586 --> 00:02:37.117
The first one is Android, and

33
00:02:37.117 --> 00:02:42.012
the second one is a Checklist for

34
00:02:42.012 --> 00:02:45.462
text-input fields.

35
00:02:50.027 --> 00:02:56.057
Next, the third one is Coursera and

36
00:02:56.057 --> 00:03:00.280
the last one is Supélec.

37
00:03:02.370 --> 00:03:04.797
Okay.

38
00:03:07.210 --> 00:03:13.360
Now, we need to associate this array
of Strings to the NumberPicker.

39
00:03:13.360 --> 00:03:19.876
So
possibilities.setDisplayedValues(possibil-

40
00:03:19.876 --> 00:03:22.005
itiesStrings).

41
00:03:22.005 --> 00:03:28.277
And we need to specify that
the numberPicker offers 4

42
00:03:28.277 --> 00:03:32.422
choices indexed from 0 to 3.

43
00:03:32.422 --> 00:03:41.627
possibilities.setMinValue(0) and

44
00:03:41.627 --> 00:03:48.171
the maximum values will be a 3.

45
00:03:48.171 --> 00:03:52.330
But in case we decide to
add more choices here,

46
00:03:52.330 --> 00:03:59.337
instead, I will put
possibilitesStrings.length- 1.

47
00:03:59.337 --> 00:04:00.341
Okay.
Now,

48
00:04:00.341 --> 00:04:04.337
let's look at the result on the emulator.

49
00:04:07.296 --> 00:04:14.087
So here if I turn the numberPicker,
I get these 4 choices.

50
00:04:14.087 --> 00:04:18.432
But if I click the OK button
when one choice is selected,

51
00:04:18.432 --> 00:04:24.546
the application stops because we
haven't defined the navigate method yet.

52
00:04:24.546 --> 00:04:26.890
So let's go back to the java code and
do that.

53
00:04:28.720 --> 00:04:33.841
So remember that
the signature of the navigate

54
00:04:33.841 --> 00:04:38.961
method that we declared in the onClick property

55
00:04:38.961 --> 00:04:44.880
of the OK button should be public void,
then navigate.

56
00:04:44.880 --> 00:04:51.460
And it takes one parameter of type View,
which in fact points to the OK button.

57
00:04:53.170 --> 00:04:55.962
Okay, so what do we want to do
when the button is clicked?

58
00:04:55.962 --> 00:05:01.250
Well, first we want to retrieve
the user choice so we can do that

59
00:05:01.250 --> 00:05:05.020
let's call it int choice.

60
00:05:05.020 --> 00:05:10.904
And we can do that by calling
the getValue on

61
00:05:10.904 --> 00:05:13.504
the possibility object.

62
00:05:13.504 --> 00:05:16.170
So that will give us
the index which was selected.

63
00:05:16.170 --> 00:05:17.713
So if int choice is zero,

64
00:05:17.713 --> 00:05:21.462
that means that the user wants to
display the Android web page.

65
00:05:21.462 --> 00:05:25.541
If the choice is 1 he wants
to display the Checklist

66
00:05:25.541 --> 00:05:30.450
text-input field web page,
and so on and so fourth.

67
00:05:30.450 --> 00:05:33.279
Then, depending on the value
this choice we want to display

68
00:05:33.279 --> 00:05:34.587
something in the webView.

69
00:05:34.587 --> 00:05:39.062
So first, we need to retrieve
a reference to the webView.

70
00:05:39.062 --> 00:05:45.254
So let's declare of WebView object,
let's call it webView.

71
00:05:45.254 --> 00:05:46.462
Okay.

72
00:05:46.462 --> 00:05:51.469
And here, let's retrieve

73
00:05:51.469 --> 00:05:55.541
the reference to the webView.

74
00:05:59.671 --> 00:06:06.586
findViewById(R.id.webView), okay.

75
00:06:10.046 --> 00:06:13.551
3 of the webpages that we want
to display are local resources to

76
00:06:13.551 --> 00:06:14.980
the application.

77
00:06:14.980 --> 00:06:17.004
So we need to add them to the project.

78
00:06:17.004 --> 00:06:24.200
Right-click on the app here, and
select New, Folder, Assets Folder.

79
00:06:24.200 --> 00:06:27.460
Keep the defaults, and click Finish.

80
00:06:27.460 --> 00:06:33.947
Now, in this new assets folder here,

81
00:06:33.947 --> 00:06:38.213
I'll copy my HTML files.

82
00:06:38.213 --> 00:06:43.504
I'm going to copy them and
I paste them here, okay.

83
00:06:46.580 --> 00:06:54.090
And now, from my MainActivity.java file,
I can load them into the web view.

84
00:06:54.090 --> 00:06:59.808
So I just call the webView.loadUrl,

85
00:06:59.808 --> 00:07:04.453
and here, I specify the URL for

86
00:07:04.453 --> 00:07:10.004
the 3 pages here.

87
00:07:10.004 --> 00:07:15.921
So it's file,
because it's a local resource.

88
00:07:15.921 --> 00:07:23.254
And I can access them using
the android_asset keyword.

89
00:07:23.254 --> 00:07:29.504
And the first one, for
instance, is android.html.

90
00:07:29.504 --> 00:07:30.330
Okay.

91
00:07:30.330 --> 00:07:38.590
So I want to display this web page in
case the choice was at index zero.

92
00:07:39.646 --> 00:07:43.071
if (choice == 0),

93
00:07:43.071 --> 00:07:48.560
then that's the webpage I want to load.

94
00:07:50.470 --> 00:07:56.112
Otherwise, else if (choice == 1),

95
00:07:56.112 --> 00:08:01.915
so that's the checklist
I want to display and

96
00:08:01.915 --> 00:08:05.796
that is webView.loadUrl.

97
00:08:05.796 --> 00:08:07.890
It's a local resource again.

98
00:08:10.250 --> 00:08:15.546
stored in the android assets

99
00:08:15.546 --> 00:08:21.032
directory, and this time the name

100
00:08:21.032 --> 00:08:26.337
of the file is checklist .html.

101
00:08:26.337 --> 00:08:29.914
else if (choice == 2),

102
00:08:29.914 --> 00:08:34.838
it means it's the third choice in the list.

103
00:08:34.838 --> 00:08:37.944
This time it's not a local resource, but

104
00:08:37.944 --> 00:08:42.129
rather it's a website which
is hosted on the Internet.

105
00:08:42.129 --> 00:08:47.355
So we are still using the loadUrl method,

106
00:08:47.355 --> 00:08:52.432
but instead of giving a local resource,

107
00:08:52.432 --> 00:08:56.164
we use the http protocol, and

108
00:08:56.164 --> 00:09:00.963
we try to reach www.coursera.org.

109
00:09:00.963 --> 00:09:05.752
And the last choice if

110
00:09:05.752 --> 00:09:10.546
(choice == 3).

111
00:09:10.546 --> 00:09:11.870
Let's copy this.

112
00:09:14.440 --> 00:09:18.180
We want to go to the supélec local resource.

113
00:09:21.415 --> 00:09:26.212
Okay, let's try that on the emulator.

114
00:09:26.212 --> 00:09:30.094
Now that Android is selected,
if I click OK,

115
00:09:30.094 --> 00:09:35.421
the web view below displays
the Android webpage on our device.

116
00:09:35.421 --> 00:09:39.797
If I select the Checklist text-input field,
and I click OK,

117
00:09:39.797 --> 00:09:42.950
I've got a different webpage.

118
00:09:42.950 --> 00:09:46.646
Now, if I pick a Coursera and click OK,

119
00:09:46.646 --> 00:09:52.134
this time the webpage cannot
load because our application

120
00:09:52.134 --> 00:09:56.961
does not have the permission
to access the Internet.

121
00:09:56.961 --> 00:10:03.880
So we need to change something in
order for that problem to be solved.

122
00:10:03.880 --> 00:10:08.671
So this, the permissions are specified
here in the AndroidManifest file.

123
00:10:08.671 --> 00:10:13.144
So open it up,
in here right below the definition of

124
00:10:13.144 --> 00:10:17.837
the application,
you need to add some permissions.

125
00:10:17.837 --> 00:10:20.410
So the syntax is the following.

126
00:10:20.410 --> 00:10:26.450
Uses.permission and
then name of the permission is internet.

127
00:10:26.450 --> 00:10:31.587
So you need to look for
Android permission internet.

128
00:10:31.587 --> 00:10:32.780
Okay, I went too far.

129
00:10:35.190 --> 00:10:37.588
Okay.

130
00:10:37.588 --> 00:10:42.185
That's the end of the permission that
we request. With that modification,

131
00:10:42.185 --> 00:10:44.570
let's run the application again.

132
00:10:52.504 --> 00:10:56.332
Well, if I pick Coursera and click OK,

133
00:10:56.332 --> 00:11:02.489
this time the web page opens and
I can see the Coursera website.

134
00:11:04.740 --> 00:11:11.756
Let's go back to our application and
pick, for instance, Android.

135
00:11:11.756 --> 00:11:19.000
You'll notice that if I click on a link in
this web page, a new activity is started.

136
00:11:20.050 --> 00:11:25.366
If I want the web page to
be displayed in my web view

137
00:11:25.366 --> 00:11:31.201
instead of a new browser,
then I need to add something

138
00:11:31.201 --> 00:11:36.389
here in my java file before
I load the URL here for

139
00:11:36.389 --> 00:11:42.255
the Android I need to
specify a web client.

140
00:11:42.255 --> 00:11:49.800
So webView.setWebViewClient, and
just create a (new WebViewClient).

141
00:11:51.500 --> 00:11:53.421
Okay, let's try that again.

142
00:12:00.753 --> 00:12:05.110
Okay, with the Android text selected,
I want to click OK.

143
00:12:05.110 --> 00:12:07.862
Now, if I click a link in this webpage,

144
00:12:07.862 --> 00:12:14.280
it does not open a new activity,
a new browser activity anymore.

145
00:12:14.280 --> 00:12:20.004
Instead, the link is opened
directly in my web view.

146
00:12:22.421 --> 00:12:25.754
In this video,
I've shown you how to display a webpage.

147
00:12:25.754 --> 00:12:29.620
First, you need to add a web view
to your graphical user interface.

148
00:12:29.620 --> 00:12:33.098
Next, if the webpage is a
resource of your application,

149
00:12:33.098 --> 00:12:35.711
you first need to create an assets folder.

150
00:12:35.711 --> 00:12:41.820
So you can do that by using the file menu,
new folder, assets folder.

151
00:12:41.820 --> 00:12:46.112
Then you place your HTML
file in this folder, and

152
00:12:46.112 --> 00:12:51.555
you can refer to it by using file:///,
android_asset and

153
00:12:51.555 --> 00:12:55.546
then the name of the file
with the extension.

154
00:12:55.546 --> 00:13:00.622
If the web page is hosted on the internet,
you can use a regular url,

155
00:13:00.622 --> 00:13:05.087
http:// name of the server and
then the name of the page.

156
00:13:05.087 --> 00:13:09.482
But you also need to change
your AndroidManifest file, so

157
00:13:09.482 --> 00:13:14.705
the application requests
permission to access the internet.

158
00:13:14.705 --> 00:13:17.249
So you need to add uses-permission

159
00:13:17.249 --> 00:13:21.504
android:name="android.permission.INTERNET".

160
00:13:21.504 --> 00:13:26.856
After that, you can load the web page in
the web view by using the loadUrl method.

161
00:13:28.080 --> 00:13:32.440
To avoid links to open a new activity,
a browser activity, but

162
00:13:32.440 --> 00:13:36.150
rather to open in the current web view,

163
00:13:36.150 --> 00:13:42.020
you need to call the setWebViewClient and
provide a new WebViewClient to it.
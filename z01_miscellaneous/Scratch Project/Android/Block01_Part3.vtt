WEBVTT

1
00:00:00.290 --> 00:00:03.660
Now I'll show you a different way to
add the button to the graphical user

2
00:00:03.660 --> 00:00:09.070
interface, directly from the Java code,
not from the XML file.

3
00:00:09.070 --> 00:00:14.610
So we won't need this line anymore because
the view won't be defined in the layout.

4
00:00:15.730 --> 00:00:18.769
We will create the resource
directly from the Java code.

5
00:00:19.890 --> 00:00:24.634
And I moved to the XML file to delete

6
00:00:24.634 --> 00:00:29.058
this definition of the button.

7
00:00:29.058 --> 00:00:29.697
Okay.

8
00:00:29.697 --> 00:00:33.070
Let's go back to the Java code.

9
00:00:34.930 --> 00:00:37.420
Now, I need to create
the button directly from here.

10
00:00:37.420 --> 00:00:42.610
So, buttonPink, that's a new button.

11
00:00:42.610 --> 00:00:44.340
I need to provide a context for that.

12
00:00:44.340 --> 00:00:46.000
That would be the application context.

13
00:00:47.870 --> 00:00:52.969
After that,
I can define a couple of characteristics

14
00:00:52.969 --> 00:00:57.727
of the button such as the text color for
instance,

15
00:00:57.727 --> 00:01:00.691
buttonPink.settextcolor.

16
00:01:00.691 --> 00:01:03.770
I think the color was black.

17
00:01:05.760 --> 00:01:10.324
Okay, there is a constant in the color
class already defined for the black color,

18
00:01:10.324 --> 00:01:12.984
but we need to set
the background color as well.

19
00:01:12.984 --> 00:01:17.384
Set background color.

20
00:01:17.384 --> 00:01:21.821
And here,
since we didn't use a standard color,

21
00:01:21.821 --> 00:01:26.680
I'll use the first color
method from the color class,

22
00:01:26.680 --> 00:01:31.450
which allows us to use
the same definition as before.

23
00:01:31.450 --> 00:01:34.073
So it was F, T.

24
00:01:34.073 --> 00:01:35.966
Let me check.

25
00:01:35.966 --> 00:01:40.290
90, F3, okay.

26
00:01:40.290 --> 00:01:43.430
So that was our pink background.

27
00:01:43.430 --> 00:01:49.940
Okay, and
now I'm ready to add this to the layout.

28
00:01:49.940 --> 00:01:52.750
I accept that I need

29
00:01:52.750 --> 00:01:56.370
a reference to the layout in order
to be able to add my button to it.

30
00:01:56.370 --> 00:01:59.450
So let's go back to the XML file.

31
00:01:59.450 --> 00:02:02.260
And here you see that we
don't have an ID yet.

32
00:02:02.260 --> 00:02:02.865
So let's add one.

33
00:02:05.664 --> 00:02:09.600
AndroidID and.

34
00:02:15.928 --> 00:02:20.105
Let's call it, I don't know,

35
00:02:20.105 --> 00:02:24.135
relativeLayoutMainScreen.

36
00:02:26.041 --> 00:02:26.541
Okay.

37
00:02:30.023 --> 00:02:34.089
Now that we set an ID for
the relative layout,

38
00:02:34.089 --> 00:02:40.190
I can go back to the Java code,
retrieve a reference to this layout.

39
00:02:40.190 --> 00:02:45.076
So I'll create a relative
layout variable called,

40
00:02:45.076 --> 00:02:47.969
relativeLayout mainScreen.

41
00:02:47.969 --> 00:02:54.860
And again, I can use the findViewById
method to retrieve it.

42
00:02:56.340 --> 00:02:58.890
So it was relativeLayout_myScreen.

43
00:03:00.300 --> 00:03:05.140
I need to cast that in order to
transfer meeting to a related layout.

44
00:03:06.760 --> 00:03:07.680
Okay.

45
00:03:07.680 --> 00:03:13.752
And now I can just choose add
child method, the addView method,

46
00:03:13.752 --> 00:03:17.539
sorry, to add the ping
button to this layout.

47
00:03:19.180 --> 00:03:19.980
buttonPink.

48
00:03:21.370 --> 00:03:25.350
Okay, since the button is not defined
in the XML file anymore, if you look at

49
00:03:25.350 --> 00:03:30.560
the Design View, in the preview,
you won't see the pink button anymore.

50
00:03:30.560 --> 00:03:32.830
So let's try the new code on the emulator.

51
00:03:36.390 --> 00:03:40.350
Okay, so the pink button is here,
but we are missing the the text.

52
00:03:40.350 --> 00:03:42.240
It's not at the right location.

53
00:03:42.240 --> 00:03:44.210
It should be below the blue one.

54
00:03:44.210 --> 00:03:47.890
The width should match
the one on the screen.

55
00:03:47.890 --> 00:03:49.740
So lets go back to the code and fix that.

56
00:03:52.865 --> 00:03:56.765
So first, let me add the text for
the button.

57
00:03:56.765 --> 00:04:04.227
buttonPink that set text, it should read,

58
00:04:04.227 --> 00:04:09.680
The Pink Panther's To Do List.

59
00:04:12.650 --> 00:04:13.310
All right.

60
00:04:17.830 --> 00:04:25.740
And next, we need to make the view larger.

61
00:04:25.740 --> 00:04:28.550
So that's a little more tricky here.

62
00:04:28.550 --> 00:04:31.955
We need to create a layout parameters.

63
00:04:31.955 --> 00:04:40.110
So, that's relativeLayout.layoutParams.

64
00:04:40.110 --> 00:04:44.539
Okay, let's call them params.

65
00:04:44.539 --> 00:04:48.581
So it's a new

66
00:04:48.581 --> 00:04:56.671
RelativeLayout params.

67
00:05:13.548 --> 00:05:18.591
Okay, so the first one is that we want

68
00:05:18.591 --> 00:05:23.815
the button width to match the parent.

69
00:05:23.815 --> 00:05:28.937
So, that's RelativeLayout.LayoutParams.

70
00:05:33.779 --> 00:05:37.590
So there is a constant for
that called the MATCH_PARENT.

71
00:05:37.590 --> 00:05:41.427
Okay, so that the width of the button and
the second that the eighth of the button,

72
00:05:41.427 --> 00:05:43.498
because that's mandatory to define buff.

73
00:05:43.498 --> 00:05:46.946
So relative layout.

74
00:06:00.460 --> 00:06:05.030
And for
the second we'll use will be WRAP_CONTENT.

75
00:06:05.030 --> 00:06:05.580
Okay.

76
00:06:07.960 --> 00:06:10.470
So that defines the size of our button.

77
00:06:12.330 --> 00:06:16.040
And now we need to decide on
the position of the button,

78
00:06:16.040 --> 00:06:19.730
in relation with the position
of the blue button.

79
00:06:19.730 --> 00:06:22.890
So we need to add a new
rule to our parameter.

80
00:06:22.890 --> 00:06:23.700
It's addRule.

81
00:06:23.700 --> 00:06:28.616
We want to set the below rule.

82
00:06:31.780 --> 00:06:36.900
To be equal to,
it should be below buttonBlue.

83
00:06:36.900 --> 00:06:41.410
So I need to get the ID
of the blue button.

84
00:06:46.480 --> 00:06:50.833
And when I add the button
to the relative layout,

85
00:06:50.833 --> 00:06:59.070
I just add the second parameter, which
is the params that I've just created.

86
00:06:59.070 --> 00:06:59.983
Okay, let's try this new version.

87
00:07:09.464 --> 00:07:12.580
Okay, so
it looks exactly like we wanted it to.

88
00:07:12.580 --> 00:07:17.162
And if I click on the pink button,
I have the pop up, and

89
00:07:17.162 --> 00:07:20.860
if I click on the blue
button it disappears.

90
00:07:23.540 --> 00:07:27.320
In this video I've shown you how to
include a button to your graphical user

91
00:07:27.320 --> 00:07:28.480
interface.

92
00:07:28.480 --> 00:07:33.210
The first solution is to define
the button directly into the XML file.

93
00:07:33.210 --> 00:07:37.470
You can use a graphical design tool to
visualize the interface as you build it.

94
00:07:37.470 --> 00:07:41.790
The second solution is more
indicated when you can't define

95
00:07:41.790 --> 00:07:44.370
a static graphical user interface.

96
00:07:44.370 --> 00:07:49.880
When you decide which views to include
on your screen only during run time.

97
00:07:49.880 --> 00:07:54.020
In that case, you can define
the button directly into the Java

98
00:07:54.020 --> 00:07:56.820
code using the button construct tool.

99
00:07:56.820 --> 00:08:00.120
Next, can you set properties
such as background color or

100
00:08:00.120 --> 00:08:04.370
the text, using methods
associated with the view object.

101
00:08:06.070 --> 00:08:10.660
After that, you need to retrieve
a reference to the parent layout.

102
00:08:10.660 --> 00:08:15.101
And then you can call the addView
method on each to add the buttons to

103
00:08:15.101 --> 00:08:17.270
the parent layout.

104
00:08:17.270 --> 00:08:22.460
If you need to define additional layout
parameter, to position the view,

105
00:08:22.460 --> 00:08:26.925
or to set its width, then you do so
by defining, by creating,

106
00:08:26.925 --> 00:08:33.740
a layoutParams object, and then you can
provide this object to the addView method.

107
00:08:33.740 --> 00:08:38.500
To attach an action to a button, the first
solution is to indicate the name of

108
00:08:38.500 --> 00:08:43.800
the method to call in the onClick
property of the button in the XML file.

109
00:08:43.800 --> 00:08:49.046
Then, in the Java file, you define
the method with the public void signature,

110
00:08:49.046 --> 00:08:51.480
in the parameter view.

111
00:08:51.480 --> 00:08:55.920
This parameter indicates the view
which triggered the method call.

112
00:08:55.920 --> 00:08:58.570
The second solution is to,
in the Java code,

113
00:08:58.570 --> 00:09:03.060
to retrieve a reference to the button
using the findViewByID method.

114
00:09:04.160 --> 00:09:07.790
Then you associate a listener with this

115
00:09:07.790 --> 00:09:11.840
button using the set
onClickListener method.

116
00:09:11.840 --> 00:09:15.420
And last, you need to define the onClick
method toward the class which implements

117
00:09:15.420 --> 00:09:16.539
the onClick list.
WEBVTT

1
00:00:01.240 --> 00:00:01.910
In this video,

2
00:00:01.910 --> 00:00:05.740
I'll show you how to compose
an application with multiple activities.

3
00:00:05.740 --> 00:00:09.740
We'll be using the example from
the Block08 application.

4
00:00:09.740 --> 00:00:14.230
In this application
the first screen displays a rating bar.

5
00:00:14.230 --> 00:00:17.080
You can select your number
of stars in it, and

6
00:00:17.080 --> 00:00:21.400
then when you click on the button,
you're directed to a second activity.

7
00:00:21.400 --> 00:00:26.283
And you see here that the information
about the number of stars which were

8
00:00:26.283 --> 00:00:29.613
selected has been passed
to the second activity.

9
00:00:29.613 --> 00:00:33.350
And when you click the back button, you
don't return to the previous activity but

10
00:00:33.350 --> 00:00:38.140
instead to the main screen of the phone.

11
00:00:38.140 --> 00:00:40.160
Start a new Android studio project.

12
00:00:42.300 --> 00:00:43.770
Call the application Block08.

13
00:00:46.290 --> 00:00:47.070
Click Next.

14
00:00:48.570 --> 00:00:52.290
Keep the API level 16, click Next.

15
00:00:52.290 --> 00:00:54.880
Peek an empty activity, next.

16
00:00:55.940 --> 00:01:00.660
And here change the name for
the activity that's created: FirstActivity

17
00:01:02.690 --> 00:01:03.830
and click finish.

18
00:01:06.100 --> 00:01:09.420
First I create the graphical user
interface for the first activity.

19
00:01:11.150 --> 00:01:13.980
I don't need this TextView here and

20
00:01:13.980 --> 00:01:20.300
instead I want a RatingBar. I double
click to edit the properties.

21
00:01:20.300 --> 00:01:22.246
I want 3 stars in it and

22
00:01:22.246 --> 00:01:27.010
I want the rating to be an integer
number like one, two, three.

23
00:01:27.010 --> 00:01:31.030
So, the stepSize is 1, okay.

24
00:01:31.030 --> 00:01:37.339
I also need a button which
reads "click here to enter".

25
00:01:43.121 --> 00:01:48.567
Now let's define the onClick property
for this button to be the 'enter' method.

26
00:01:52.297 --> 00:01:56.460
Now, let's go back to FirstActivity.java
to define this method.

27
00:01:58.040 --> 00:02:03.830
All right, so
public void, method name is 'enter' and

28
00:02:03.830 --> 00:02:06.540
then it takes a View as a parameter.

29
00:02:09.460 --> 00:02:14.510
Before we create a second activity,
we'll just display a pop

30
00:02:14.510 --> 00:02:19.550
up message which indicates how
much stars the user selected.

31
00:02:19.550 --> 00:02:22.087
So first I need to retrieve
a reference to the rating bar.

32
00:02:24.557 --> 00:02:29.567
So let's create our RatingBar
object called ratingBar.

33
00:02:31.590 --> 00:02:37.440
As usual I use a findViewById
method to retrieve the reference for

34
00:02:37.440 --> 00:02:40.643
the view that we've
defined in the XML file

35
00:02:40.643 --> 00:02:46.800
R.id.ratingBar.

36
00:02:46.800 --> 00:02:52.398
Okay let's now create
an object to hold the rate.

37
00:02:52.398 --> 00:02:58.298
The float 'rating'.

38
00:02:58.298 --> 00:03:03.451
I can retrieve the
current value selected in

39
00:03:03.451 --> 00:03:08.748
the rating bar using ratingBar.getRating.

40
00:03:08.748 --> 00:03:13.005
And let's create a toast
to display this value.

41
00:03:13.005 --> 00:03:16.361
Tost.makeText,

42
00:03:16.361 --> 00:03:21.814
get the application context,

43
00:03:21.814 --> 00:03:27.056
and then the message will be,

44
00:03:27.056 --> 00:03:31.060
'rating' and "stars".

45
00:03:31.060 --> 00:03:34.402
And I want to display that for
a short amount of time.

46
00:03:34.402 --> 00:03:37.371
...

47
00:03:41.367 --> 00:03:44.135
Okay, and let's show this toast.

48
00:03:46.640 --> 00:03:49.080
All right, let's try that on the emulator.

49
00:03:52.160 --> 00:03:58.760
If I don't select any star and I click on
the button I've got the toast: "0 stars".

50
00:03:58.760 --> 00:04:01.290
And then if I select,
let's say, two of them,

51
00:04:01.290 --> 00:04:06.940
and I click on the button,
the pop-up reads "2 stars".

52
00:04:06.940 --> 00:04:08.870
Okay, but what we want now

53
00:04:08.870 --> 00:04:13.990
is not a pop-up message but rather we
want a second activity to open and

54
00:04:13.990 --> 00:04:17.717
we want to display a message with
the number of stars in it in

55
00:04:17.717 --> 00:04:22.510
the other activity.
Let's go back to the code.

56
00:04:24.430 --> 00:04:27.020
First we need to create a second activity.

57
00:04:27.020 --> 00:04:30.040
In order to do that,
right click on the app here,

58
00:04:30.040 --> 00:04:35.150
select New, Activity, Empty Activity.

59
00:04:35.150 --> 00:04:37.340
Let's call this activity SecondActivity.

60
00:04:41.310 --> 00:04:42.500
And click finish.

61
00:04:43.860 --> 00:04:47.330
In the graphical user interface
of this second activity,

62
00:04:47.330 --> 00:04:49.504
you will just have a large text.

63
00:04:49.504 --> 00:04:57.992
"Welcome to second activity!", for now.

64
00:04:59.020 --> 00:05:03.060
Okay so now we want to move from
the first activity to the second one.

65
00:05:03.060 --> 00:05:06.210
So let's go back to FirstActivity.java,

66
00:05:06.210 --> 00:05:09.410
and in here, in the enter method,

67
00:05:09.410 --> 00:05:14.478
we'll specified, using an object which represents
an action to perform,

68
00:05:14.478 --> 00:05:17.950
that we want to start the second activity.

69
00:05:17.950 --> 00:05:21.750
So first, let's remove the toast message,

70
00:05:23.610 --> 00:05:25.510
and create an Intent.

71
00:05:25.510 --> 00:05:32.210
So intents are objects that
represent operations to be performed.

72
00:05:32.210 --> 00:05:36.300
So in our case,
this intent represents our will

73
00:05:36.300 --> 00:05:41.170
to start the second activity.
Let's call it 'goToSecond'.

74
00:05:41.170 --> 00:05:43.752
Go, to, second.

75
00:05:46.033 --> 00:05:49.562
Okay, I'll create that, it's a new Intent.

76
00:05:53.240 --> 00:05:56.965
Okay, and it will be a specific intent:
["explicit intent"]

77
00:05:56.965 --> 00:06:01.460
I specify the activity I
want to see started.

78
00:06:01.460 --> 00:06:04.900
So in order to do that,
I use the setClass method.

79
00:06:04.900 --> 00:06:09.330
goToSecond.setClass and
provide the context,

80
00:06:09.330 --> 00:06:14.130
and the class I want to see started
is the SecondActivity.class.

81
00:06:17.450 --> 00:06:21.110
And when this is done
the only thing I have left

82
00:06:21.110 --> 00:06:26.020
to do is to use startActivity and
provide the intent as a parameter.

83
00:06:28.000 --> 00:06:30.560
Okay, let's try that on the emulator.

84
00:06:34.610 --> 00:06:39.450
Now when I click the button I
move to the second activity.

85
00:06:41.020 --> 00:06:45.861
What we need to do now is to pass the
rating information from the first activity

86
00:06:45.861 --> 00:06:46.837
to the second.

87
00:06:46.837 --> 00:06:50.538
So we need to add something
here to our intent.

88
00:06:50.538 --> 00:06:52.280
I'll use a putExtra method.

89
00:06:52.280 --> 00:06:57.070
You see that you have a lot of them,
and it's a little like the preferences:

90
00:06:57.070 --> 00:06:59.750
you provide a key and a value.

91
00:06:59.750 --> 00:07:01.880
The first parameter is a key.

92
00:07:01.880 --> 00:07:04.810
And you see that you can
provide different kinds of value.

93
00:07:04.810 --> 00:07:08.700
And here we want to
provide the float 'rating'.

94
00:07:08.700 --> 00:07:14.257
putExtra, and then my key will be 
for instance 'nbStars'

95
00:07:15.473 --> 00:07:19.125
and the value is 'rating'.

96
00:07:21.814 --> 00:07:23.254
And that's it.

97
00:07:23.254 --> 00:07:27.649
Now, in the second activity. First,

98
00:07:27.649 --> 00:07:33.180
I need to retrieve this intent in order
to be able to get the value from it.

99
00:07:33.180 --> 00:07:38.948
So, I'll create an intent,
let's call it 'caller'.

100
00:07:38.948 --> 00:07:44.600
So that will be the caller, okay.

101
00:07:46.570 --> 00:07:53.520
And from that intent I can retrieve the
value which was set up with the putExtra

102
00:07:54.705 --> 00:07:59.190
using the key, so the key was 'nbStars'.

103
00:07:59.190 --> 00:08:04.958
I can create a float,
let's call it 'rating' as well.

104
00:08:04.958 --> 00:08:10.510
caller.getFloatExtra.

105
00:08:10.510 --> 00:08:16.660
The key is 'nbStar'.

106
00:08:16.660 --> 00:08:19.230
I don't remember if I put an 's'.

107
00:08:19.230 --> 00:08:20.300
Yes.

108
00:08:20.300 --> 00:08:26.440
'nbStars' and
we need a default value, let's see... 0.

109
00:08:26.440 --> 00:08:31.420
And I want to display this
rating in the TextView.

110
00:08:31.420 --> 00:08:35.213
So first I need to retrieve the TextView.
TextView

111
00:08:40.460 --> 00:08:45.465
I use a findViewById method as usual.

112
00:08:45.465 --> 00:08:48.950
R.id.textView

113
00:08:48.950 --> 00:08:53.020
And now I can change the text
to include the rating in it.

114
00:08:53.020 --> 00:08:57.989
textView.setText

115
00:08:57.989 --> 00:09:03.790
"Welcome to the second activity!

116
00:09:10.791 --> 00:09:18.540
Your rating... and
I concatenate the value we've retrieved.

117
00:09:20.370 --> 00:09:21.654
Okay, let's try that.

118
00:09:25.555 --> 00:09:29.810
Let's say I select three stars,
I click here to enter.

119
00:09:31.490 --> 00:09:33.450
I arrive on the second activity and

120
00:09:33.450 --> 00:09:37.380
you can see that the information
was correctly passed along.

121
00:09:37.380 --> 00:09:42.060
Now, let's move back to the first
activity and select maybe only one star.

122
00:09:42.060 --> 00:09:47.019
If I click on the button again,
you see that the new value was provided.

123
00:09:48.330 --> 00:09:52.810
But maybe you want the application to
close completely when you hit the back

124
00:09:52.810 --> 00:09:58.360
button here and you don't want to
go back to this screen anymore.

125
00:09:58.360 --> 00:10:02.340
So in order to do that in the first
activity after you've started

126
00:10:02.340 --> 00:10:05.580
the second one,
you just call the finish method.

127
00:10:08.290 --> 00:10:10.121
All right, let's run that.

128
00:10:13.641 --> 00:10:18.068
I go to the next activity, and
when I hit the back button,

129
00:10:18.068 --> 00:10:22.969
I go back to the main screen and
not the first activity anymore.

130
00:10:25.314 --> 00:10:30.340
In this video you've learned how to build
an application with multiple activities.

131
00:10:30.340 --> 00:10:32.610
First, you need to create
a second activity, so

132
00:10:32.610 --> 00:10:37.340
you can do that by right clicking
on 'app' then select 'New' and 'Activity'.

133
00:10:38.340 --> 00:10:39.750
And in the first activity,

134
00:10:39.750 --> 00:10:43.950
you need to create an explicit intent
to launch the second activity.

135
00:10:43.950 --> 00:10:48.350
You do that by creating
an Intent object and next

136
00:10:48.350 --> 00:10:52.750
you specify the activity to launch
using the setClass method.

137
00:10:52.750 --> 00:10:53.670
When this is done,

138
00:10:53.670 --> 00:10:58.730
you call the startActivity method,
providing the intent as a parameter.

139
00:11:00.000 --> 00:11:03.490
When the second activity is started,
if the user clicks on

140
00:11:03.490 --> 00:11:07.560
the back button of the phone,
you will return to the first activity.

141
00:11:07.560 --> 00:11:11.969
If you don't want that, if rather you
prefer to have the first activity

142
00:11:11.969 --> 00:11:16.968
suppressed from the activity stack,
then after starting the second activity,

143
00:11:16.968 --> 00:11:18.748
you call the finish method.

144
00:11:20.556 --> 00:11:24.435
You've also learned how to pass
information between activities.

145
00:11:24.435 --> 00:11:28.726
In the first activity you add the value
that you want to pass to the second

146
00:11:28.726 --> 00:11:31.455
activity using the putExtra method.

147
00:11:31.455 --> 00:11:35.825
The putExtra requires 
a key which will identify

148
00:11:35.825 --> 00:11:41.800
the data that you want to transmit and
the value that you want to transmit.

149
00:11:41.800 --> 00:11:46.630
The second activity upon starting
can retrieve the value that you've

150
00:11:46.630 --> 00:11:50.980
transmitted from the first one by first
retrieving the reference to the intent,

151
00:11:50.980 --> 00:11:54.100
which caused the launch
of the second activity,

152
00:11:54.100 --> 00:11:58.910
and then on this intent you
can call the getFloat or

153
00:11:58.910 --> 00:12:04.280
getStringExtra depending on the kind
of value that you've passed and

154
00:12:04.280 --> 00:12:07.520
then you provide the key and
a default value.